stages:
  - deploy 


variables:
  AWS_DEFAULT_REGION: us-east-1
  ECR_REGISTRY : 900844900800.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY : cicd_django
  CLUSTER_NAME: cluster-testgitlab
  TASK_DEFINITION_NAME: Test-App
  SERVICE_NAME: django-service

deploy-job:
  tags:
    - django_app
  stage: deploy
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  services: 
    - docker:dind
  before_script:
   #- pip install awscli
   #- aws --version
    - docker --version 
    - jq --version        # sudo apt install -y jq
   
  script:
    - echo "Building image..."
    - docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$CI_PIPELINE_IID .
    - echo "Pushing image..."
    - docker login -u AWS -p $(aws ecr get-login-password --region us-east-1) $ECR_REGISTRY
   #- aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$CI_PIPELINE_IID
    - echo $ECR_REGISTRY/$ECR_REPOSITORY:$CI_PIPELINE_IID

    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - NEW_CONTAINER_DEFINTIION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$CI_PIPELINE_IID" '.taskDefinition.containerDefinitions[0].image = $IMAGE | .taskDefinition.containerDefinitions[0]')
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINTIION}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
    
   